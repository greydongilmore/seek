import os
import sys
sys.path.append("../../../")
from seek.pipeline.fileutils import SCRIPTS_UTIL_DIR
from seek.pipeline.fileutils import get_freesurfer_dir, get_rawct_dir, get_rawmri_dir

"""
export SUBJECTS_DIR=~/hdd/data/neuroimaging/freesurfer_output/

A snakemake file for running reconstructions on the neuroimaging data.

snakemake --dag | dot -Tpdf > dag_neuroimaging_pipeline_tvbpackaging.pdf

If this doesn't work off the bat, make sure you explicitly set SUBJECTS_DIR
"""
configfile: "../config/localconfig.yaml"

# get the freesurfer patient directory
FS_PATIENT_OUTPUT_DIR = get_freesurfer_dir(config)
RAW_CT_FOLDER = get_rawct_dir(config)
RAW_MRI_FOLDER = get_rawmri_dir(config)

FSOUT_MRI_FOLDER = os.path.join(FS_PATIENT_OUTPUT_DIR, "mri")
FSOUT_CT_FOLDER = os.path.join(FS_PATIENT_OUTPUT_DIR, "CT")
FSOUT_ELECS_FOLDER = os.path.join(FS_PATIENT_OUTPUT_DIR, "elecs")
FSOUT_ACPC_FOLDER = os.path.join(FS_PATIENT_OUTPUT_DIR, "acpc")
FSOUT_SURF_FOLDER = os.path.join(FS_PATIENT_OUTPUT_DIR, "surf")
FSOUT_TVB_FOLDER = os.path.join(FS_PATIENT_OUTPUT_DIR, "tvb")
FSOUT_LABEL_FOLDER = os.path.join(FS_PATIENT_OUTPUT_DIR, "label")

# First rule
rule all:
    input:
        # master output file
        tvb_output_file = expand(os.path.join(FSOUT_TVB_FOLDER, "connectivity_{atlas}.zip"),
                     patient_id=config['patients'], atlas=ATLAS),
        # label in source lut volume
        # label_volume_file = expand(os.path.join(FSOUT_TVB_FOLDER, "label_in_T1_volume.{atlas}.nii.gz"),
        #             patient_id=config['patients'], atlas=ATLAS),
    shell:
        "echo 'done'"

"""
Rule for converting labels in one volume to another labeling system.

Used for converting FS's lookup table to flirt's lookuptable, which is easier to read.

Rule for creating a label volume file that is mapped
in our simple space of FS (0-83 or 0-255) vs the unsequential mappings.

Makes things simpler to analyze under one LUT.
"""
rule create_label_in_mri_volume:
    input:
        desikan_orig_file=os.path.join(FSOUT_MRI_FOLDER, "aparc.a2009s+aseg.mgz"),
        destrieux_orig_file = os.path.join(FSOUT_MRI_FOLDER, "aparc.a2009s+aseg.mgz"),

    params:
        lut_fs = os.path.join(FREESURFER_HOME, "FreeSurferColorLUT.txt"),
        lut_target = os.path.join(MRTRIX3_HOME, "share/mrtrix3/labelconvert/fs_default.txt")
    output:
        label_volume_file=os.path.join(FSOUT_TVB_FOLDER, "label_in_T1_volume.{atlas}.nii.gz")
    shell:
        "labelconvert {input.desikan_orig_file} \
                    {params.lut_fs} \
                    {params.lut_target} \
                    {output.label_volume_file};"
        "labelconvert {input.destrieux_orig_file} \
                    {params.lut_fs} \
                    {params.lut_target} \
                    {output.label_volume_file};"


"""
Rule for extracting surface geometry information from the
MRI volumes
"""
rule create_structural_dataset:
    input:
        subcort_success_flag_file=os.path.join(FS_PATIENT_OUTPUT_DIR, "{patient_id}_subcort_success.txt"),
        lhpial=os.path.join(FSOUT_SURF_FOLDER, "ascii", "lh.pial.asc"),
        rhpial=os.path.join(FSOUT_SURF_FOLDER, "ascii", "rh.pial.asc"),
        lhlabel=os.path.join(FSOUT_LABEL_FOLDER, "lh.aparc.annot"),
        rhlabel=os.path.join(FSOUT_LABEL_FOLDER, "rh.aparc.annot"),
        label_volume_file=os.path.join(FSOUT_TVB_FOLDER, "label_in_T1_volume.{atlas}.nii.gz"),
    params:
        subcortdir = os.path.join(FS_PATIENT_OUTPUT_DIR, "aseg2srf"),
        subjdir=FS_PATIENT_OUTPUT_DIR,
        output_surface_dir=FSOUT_TVB_FOLDER,
        lut_fs=os.path.join(FREESURFER_HOME, "FreeSurferColorLUT.txt"),
        lut_target=os.path.join(MRTRIX3_HOME, "share/mrtrix3/labelconvert/fs_default.txt"),
        scripts_dir=os.path.join(SCRIPTS_UTIL_DIR)
    output:
        output_file=os.path.join(FSOUT_TVB_FOLDER, "connectivity_{atlas}.zip")
    shell:
        "echo 'RUNNING CREATION OF FINAL FILES...';"
        "cd {params.scripts_dir};"
        # "touch {output.output_file};"
        "python -m create_surface_files {params.subjdir} \
                                        {params.subcortdir} \
                                        {params.lut_fs} \
                                        {params.lut_target} \
                                        {output.output_file} \
                                        {params.output_surface_dir};"